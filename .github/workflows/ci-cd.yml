name: Flask CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

# SECURITY: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° Least Privilege Principle
permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write
  actions: read

jobs:
  # Job ‡∏ó‡∏µ‡πà 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.POSTGRES_USER }}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test environment
        run: |
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "FLASK_ENV=testing" >> $GITHUB_ENV

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; do sleep 2; done'
          echo "‚úÖ PostgreSQL is ready!"
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 2; done'
          echo "‚úÖ Redis is ready!"

      - name: Run tests with coverage
        run: |
          cd backend
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: backend/htmlcov/
          retention-days: 5

  # Job ‡∏ó‡∏µ‡πà 2: Security Scanning ‡∏î‡πâ‡∏ß‡∏¢ Snyk
  security-snyk:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      # SCA - Dependencies Scan
      - name: Run Snyk Dependencies Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/requirements.txt
          command: test

      # SAST - Code Scan
      - name: Run Snyk Code Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --sarif-file-output=snyk-code.sarif
          command: code test

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk-code.sarif

      - name: Monitor with Snyk
        if: github.ref == 'refs/heads/main'
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=backend/requirements.txt
          command: monitor

  # Job ‡∏ó‡∏µ‡πà 3: Additional Security Scans
  security-additional:
    name: Additional Security Scans
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Run Safety check
        run: |
          pip install safety
          cd backend
          safety check --json --output safety-report.json || echo "‚ö†Ô∏è Safety warnings found"
        continue-on-error: true

      - name: Run Bandit SAST
        run: |
          pip install bandit[toml]
          cd backend
          bandit -r . -f json -o bandit-report.json -ll || echo "‚ö†Ô∏è Bandit warnings found"
        continue-on-error: true

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generateSarif: "1"
        continue-on-error: true

      - name: Secret Scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30

  # Job ‡∏ó‡∏µ‡πà 4: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-snyk, security-additional]
    if: |
      always() && 
      needs.test.result == 'success' && 
      (needs.security-snyk.result == 'success' || needs.security-snyk.result == 'skipped')

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job ‡∏ó‡∏µ‡πà 5: Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security-snyk, security-additional, build]
    if: always()
    
    steps:
      - name: Create PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const testStatus = '${{ needs.test.result }}';
            const snykStatus = '${{ needs.security-snyk.result }}';
            const additionalSecurityStatus = '${{ needs.security-additional.result }}';
            const buildStatus = '${{ needs.build.result }}';
            
            const statusEmoji = {
              'success': '‚úÖ',
              'failure': '‚ùå',
              'cancelled': '‚èπÔ∏è',
              'skipped': '‚è≠Ô∏è'
            };
            
            const comment = \`
            ## üöÄ CI/CD Pipeline Results
            
            | Job | Status | Result |
            |-----|--------|---------|
            | Tests | \${statusEmoji[testStatus] || '‚ùì'} | \${testStatus} |
            | Snyk Security | \${statusEmoji[snykStatus] || '‚ùì'} | \${snykStatus} |
            | Additional Security | \${statusEmoji[additionalSecurityStatus] || '‚ùì'} | \${additionalSecurityStatus} |
            | Docker Build | \${statusEmoji[buildStatus] || '‚ùì'} | \${buildStatus} |
            
            **Commit**: \\\`${{ github.sha }}\\\`
            **Branch**: \\\`${{ github.head_ref }}\\\`
            \`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Print summary
        run: |
          echo "=== Pipeline Summary ==="
          echo "Test: ${{ needs.test.result }}"
          echo "Snyk: ${{ needs.security-snyk.result }}"
          echo "Security: ${{ needs.security-additional.result }}"
          echo "Build: ${{ needs.build.result }}"
